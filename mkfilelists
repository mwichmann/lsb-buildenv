#!/usr/bin/python

# mkfilelists - create lists of headers and libs for core and desktop
# Copyright 2006 Free Standards Group, Inc.

import os
import MySQLdb
import sys

# Lists of names of the modules in core and desktop as they appear
# in the database.

length = len(sys.argv)
if length == 2:
    lsbversion = sys.argv[1]

core_modules = ['LSB_Core', 'LSB_Graphics', 'LSB_Cpp', 'LSB_Printing',
                'LSB_Multimedia', 'LSB_Security']
desktop_modules = ['LSB_Toolkit_Gtk', 'LSB_Toolkit_Qt',
                   'LSB_Graphics_Ext', 'LSB_XML', 'LSB_Toolkit_Qt3']

# For some modules, we should only include the stub libraries;
# the headers are expected to come from some other source.

lib_only_modules = ['LSB_Toolkit_Qt', 'LSB_Cpp', 'LSB_Toolkit_Qt3']

# List file names.  These are relative to the stub_libs and headers
# directories, making for a total of four files.

if length == 2:
    core_fn = 'core_filelist_' + lsbversion
    desktop_fn = 'desktop_filelist_' + lsbversion
else :
    core_fn = 'core_filelist'
    desktop_fn = 'desktop_filelist'

# Queries to use to retrieve the header and library information
# from the database.

header_query = """
SELECT SMname, Hname FROM SubModule,Header,ModLib,Library
WHERE SubModule.SMid = ModLib.MLmid
AND Library.Lid = ModLib.MLlid
AND Library.Lid = Header.Hlib
AND ( ( Happearedin > ''
AND ( Hwithdrawnin IS NULL OR Hwithdrawnin > '3.0') )
OR Hsrcerror='Yes' )"""

if length == 2:
    lib_query = """
    SELECT DISTINCT SMname,Lname FROM SubModule,ModLib,Library
    LEFT JOIN ArchLib ON Lid=ALlid
    WHERE Lname LIKE 'lib%'
    AND (SubModule.SMid = ModLib.MLmid AND Library.Lid = ModLib.MLlid)
    AND (ALappearedin <= '""" + lsbversion + """' and ALappearedin<>'')
    AND (ALwithdrawnin IS NULL OR ALwithdrawnin > '""" + lsbversion + """')"""
else:
    lib_query = """
    SELECT DISTINCT SMname,Lname FROM SubModule,ModLib,Library
    LEFT JOIN ArchLib ON Lid=ALlid
    WHERE Lname LIKE 'lib%'
    AND (SubModule.SMid = ModLib.MLmid AND Library.Lid = ModLib.MLlid)
    AND ALappearedin > ''
    AND (ALwithdrawnin IS NULL OR ALwithdrawnin > '3.0')"""

# There are some things we can't derive from the database
# 1. some "dummy" headers that are in vcs but not in the database
# 2. the fact that some headers are generated but not shipped
# add and subtract these from the generated lists

core_headers_add = [
    'linux/netlink.h',
    'linux/rtnetlink.h',
    'linux/socket.h',
    'stropts.h',
    'netpacket/packet.h',
    ]

core_headers_remove = [
    'err.h',
    'features.h',
    'float.h',
    'rpc/pmap_clnt.h',
    'X11/CompositeP.h',
    'X11/ConstrainP.h',
    'X11/extensions/XInput.h',
    'X11/extensions/XKBgeom.h',
    'X11/ObjectP.h',
    'X11/XKBlib.h',
    ]


def main():

    # Create the lists.

    core_headers = []
    core_libs = []
    desktop_headers = []
    desktop_libs = []

    # Connect to the database, using the regular conventions for
    # setting the database connection settings.

    if 'LSBDBPASSWD' not in os.environ:
        os.environ['LSBDBPASSWD'] = ''

    connection = MySQLdb.connect(host=os.environ['LSBDBHOST'],
                                 user=os.environ['LSBUSER'],
                                 passwd=os.environ['LSBDBPASSWD'],
                                 db=os.environ['LSBDB'])

    # Collate the data into four lists, corresponding to the four lists
    # created above.

    for (query, core_list, desktop_list, ignore_list) in \
        ((header_query, core_headers, desktop_headers,
         lib_only_modules), (lib_query, core_libs, desktop_libs, [])):
        itemlist = connection.cursor()
        itemlist.execute(query)
        for (module, item) in itemlist.fetchall():
            if module in ignore_list:
                continue
            elif module in core_modules:
                core_list.append(item)
            elif module in desktop_modules:
                desktop_list.append(item)
            else:
                raise ValueError('unknown module found: ' + module)
        itemlist.close()

    # For some reason, some of the header info returned will include
    # some Nones.  Filter those out.

    core_headers = [x for x in core_headers if x]
    desktop_headers = [x for x in desktop_headers if x]

    # Apply the core header munging mentioned above.

    core_headers = [x for x in core_headers + core_headers_add if
                    x not in core_headers_remove]

    # The database contains at least one entry with information
    # in the library name field that isn't a library name.  For
    # now, filter that out by removing all entries containing
    # spaces.

    core_libs = [x for x in core_libs if ' ' not in x]
    desktop_libs = [x for x in desktop_libs if ' ' not in x]

    # Write the lists.

    for (fn, flist) in (('headers/' + core_fn, core_headers),
                        ('stub_libs/' + core_fn, core_libs),
                        ('headers/' + desktop_fn, desktop_headers),
                        ('stub_libs/' + desktop_fn, desktop_libs)):
        headerfile = open(fn, 'w')
        headerfile.write('\n'.join(flist))
        headerfile.write('\n')
        headerfile.close()


if __name__ == '__main__':
    main()



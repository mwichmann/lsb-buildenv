#!/usr/bin/perl -I../

use Getopt::Long;
use DBI;
use specdb;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

# Set to 1 to trace SQL statments
$trace=0;
$specdb::trace=$trace;
$specdb::datadef = 1;

sub
usage()
{
die "mkdatadef -h <headername> -a <archname> -v <lsbversion>";
}

GetOptions("h=s" => \$headname,
           "v=s" => \$lsbversion,
           "a=s" => \$archname);

if( !$headname ) { usage(); }
if( !$archname ) { usage(); }
if( !$lsbversion ) { usage(); }

$headname =~ s/^\.\///;

$dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;
$specdb::dbh = $dbh;
specdb::prepareQueries();

#
# Get the Architecture and Header ids
#
$Aid = specdb::getArchitectureId($archname);
if( !$Aid ) {
    $dbh->disconnect;
    exit 0;
}

($Hid, $Hsrcerror) = specdb::getHeaderId($headname, $lsbversion);
if( !$Hid ) {
    $dbh->disconnect;
    exit 0;
}

$TMaid=$Aid;
$specdb::TMaid = $TMaid;
$specdb::ArchId = $Aid;

# We need some value that will be greater that any legal LSB version
$tooLargeLSBVersion = "1000";

#
# Auxiliary temporary tables
#
if( $Aid!=1 ) {
    # Table with Tids of generic types - no need to dump them into arch specific files
    $create = "CREATE TEMPORARY TABLE tmp_GenericTypes ";
    $create.= "(KEY `k_Tid`(`Tid`)) ";
    $create.= "SELECT DISTINCT Tid FROM Type ";
    $create.= "JOIN ArchType ON ATtid=Tid ";
    $create.= "JOIN HeaderGroup ON HGid=Theadgroup ";
    $create.= "LEFT JOIN TypeMember ON TMmemberof=Tid ";
    $create.= "WHERE HGheader=$Hid ";
    $create.= "AND ATaid=1 ";
    $create.= "AND ATappearedin <='$lsbversion' AND ATappearedin > '' ";
    $create.= "AND (ATwithdrawnin IS NULL OR ATwithdrawnin > '$lsbversion') ";
    $create.= "AND (TMaid IS NULL ";
    $create.= "     OR ( TMaid=1 "; # Some types can be marked as generic, but have arch-specific members
    $create.= "         AND TMappearedin > '' AND TMappearedin <='$lsbversion' ";
    $create.= "         AND (TMwithdrawnin IS NULL OR TMwithdrawnin > '$lsbversion') ";
    $create.= "     )";
    $create.= ")";
    print $create,"\n" if $trace;
    $dbh->do("$create") or die "Couldn't execute $create query: ".DBI->errstr;;

    $select = "SELECT DISTINCT AIint FROM Interface ";
    $select.= "LEFT JOIN ArchInt ON AIint=Iid ";
    $select.= "WHERE Iheader=$Hid ";
    $select.= "AND AIarch=1 AND AIappearedin <= '$lsbversion' AND AIappearedin > '' ";
    $select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ";
    print $select,"\n" if $trace;
    my $sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
    $sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
    for( 1..$sth->rows ) {
        my $int = $sth->fetchrow_hashref;
        $generic_ints{$int->{'AIint'}}=1;
    }
    $sth->finish;
    $generic_ints_list=join ',', keys(%generic_ints);
}

# Base types for typedefs
$create = "CREATE TEMPORARY TABLE tmp_TypedefBases ";
$create.= "(KEY `k_Tid`(`Tid`)) ";
$create.= "SELECT DISTINCT ATbasetype AS Tid FROM ArchType ";
$create.= "LEFT JOIN Type T1 ON T1.Tid=ATtid ";
$create.= "LEFT JOIN HeaderGroup ON Theadgroup=HGid ";
$create.= "LEFT JOIN Type T2 ON T2.Tid=ATbasetype ";
$create.= "WHERE ATaid=$Aid AND HGheader=$Hid AND T1.Ttype='Typedef' ";
$create.= "AND T1.Theadgroup=T2.Theadgroup ";
$create.= "AND ATappearedin <='$lsbversion' AND ATappearedin > '' ";
$create.= "AND (ATwithdrawnin IS NULL OR ATwithdrawnin > '$lsbversion') ";
print $create,"\n" if $trace;
$dbh->do("$create") or die "Couldn't execute $create query: ".DBI->errstr;;


# dump AbiApi records
$select = "SELECT AAvalue FROM AbiApi ";
$select.= "LEFT JOIN Interface ON Iid=AAbinint ";
$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
$select.= "WHERE Iheader=$Hid ";
$select.= "AND AAappearedin <= '$lsbversion' AND AAappearedin > '' ";
$select.= "AND (AAwithdrawnin IS NULL OR AAwithdrawnin > '$lsbversion') ";
$select.= "AND AIarch=$Aid ";
$select.= "AND AIappearedin <= '$lsbversion' AND AIappearedin > '' ";
$select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ";
if( $Aid != 1 and $generic_ints_list ) {
    $select.= "AND Iid NOT IN ( ";
    $select.= $generic_ints_list;
    $select.= ")";
}
print $select,"\n" if $trace;
my $sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
print "\n";
for( 1..$sth->rows ) {
    my $aavalue = $sth->fetchrow_hashref;
    print $aavalue->{'AAvalue'}."\n";
}
if( $sth->rows ) {
    print "\n";
}
$sth->finish;

#
# Get the info from the types in the $type hash
#
$select = "SELECT HGid FROM HeaderGroup ";
$select.= "WHERE HGheader=$Hid ";
$select.= "ORDER BY HGorder";
print $select,"\n" if $trace;
$hgh = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$hgh->execute or die "Couldn't execute $select query: ".DBI->errstr;
print $hgh->rows," rows\n" if $trace;

$totrows = 0;
for(1..$hgh->rows) {
    $entry = $hgh->fetchrow_hashref;
    $HGid=$entry->{'HGid'};
    $specdb::HGid = $HGid;
    # Make sure a blank line is present between every group
    print "\n";

    # Display the Constants
    $select = "SELECT * FROM Constant ";
    $select.= "LEFT JOIN ArchConst ON Cid=ACcid ";
    $select.= "WHERE Cheadgroup=$HGid ";
    $select.= "AND Ctype<>'header_depend' ";
    $select.= "AND ACaid=$Aid ";
    $select.= "AND ACappearedin <= '$lsbversion' AND ACappearedin > '' ";
    $select.= "AND (ACwithdrawnin IS NULL OR ACwithdrawnin > '$lsbversion') ";
    $select.=" ORDER BY ACorder, ACvalue, Cname, ACaid";
    $ch = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
    $ch->execute or die "Couldn't execute $select query: ".DBI->errstr;
    print $ch->rows," rows\n" if $trace;
    for(1..$ch->rows) {
        $centry = $ch->fetchrow_hashref;
        specdb::displayconstant($centry);
        $totrows++;
    }
    $ch->finish;
    print "\n\n";

    # Display the Types
    $select = "SELECT * FROM Type ";
    $select.= "JOIN ArchType ON ATtid=Tid ";
    $select.= "LEFT JOIN TypeMember ON TMmemberof=Tid ";
    $select.= "LEFT JOIN Architecture ON ATaid=Aid ";
    $select.= "WHERE Theadgroup=$HGid ";
    $select.= "AND ATappearedin <= '$lsbversion' AND ATappearedin > '' ";
    $select.= "AND (ATwithdrawnin IS NULL OR ATwithdrawnin >'$lsbversion') ";
    $select.= "AND Aid=$Aid ";
    $select.= "AND (TMaid IS NULL ";
    $select.= "     OR ( TMaid=$Aid ";
    $select.= "         AND TMappearedin > '' AND TMappearedin <='$lsbversion' ";
    $seelct.= "         AND (TMwithdrawnin IS NULL OR TMwithdrawnin > '$lsbversion') ";
    $select.= "     )";
    $select.= ")";
    if( $Aid!=1 ) {
        $select.= "AND Tid NOT IN ";
        $select.= "(SELECT Tid FROM tmp_GenericTypes) ";
    }
    # Skip structs which are basetypes for included typedefs from this header group
    $select.= "AND (Ttype <> 'Struct' OR Tid NOT IN ";
    $select.= "(SELECT DISTINCT Tid FROM tmp_TypedefBases) )";
    $select.= "GROUP BY Tid,ATaid ";
    $select.= "ORDER BY Tid";
    print $select,"\n" if $trace;
    $th = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
    $th->execute or die "Couldn't execute $select query: ".DBI->errstr;
    print $th->rows," rows\n" if $trace;
    for(1..$th->rows) {
        $tentry = $th->fetchrow_hashref;
        if( $specdb::processed_typedefs{$tentry->{'Tid'}} ) {
            next;
        }
#        specdb::displaytype($tentry,0,$tooLargeLSBVersion,'');
        specdb::displaytype($tentry,0,'','');
        print ";\n";
        $totrows++;
    }
    $th->finish;
}
$hgh->finish;

#
# now dump out the function prototypes --- see bug 1089
# while it is questionable if these are really part of "Data Definitions",
# it can be argued that they are, and that including them increases
# readability ...
#
$select = "SELECT * FROM Interface ";
$select.= "LEFT JOIN Type on Ireturn = Tid ";
$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
$select.= "WHERE Iheader = $Hid AND (Isrcbin<>'BinOnly' OR Iid IN ( ";
$select.= "  SELECT AAbinint FROM AbiApi ";
$select.= "  WHERE AAappearedin <= '$lsbversion' AND AAappearedin > '' ";
$select.= "  AND (AAwithdrawnin IS NULL OR AAwithdrawnin > '$lsbversion') ";
$select.= "))";
$select.= "AND Iid NOT IN ( ";
$select.= " SELECT AAsrcint FROM AbiApi ";
$select.= "  WHERE AAappearedin <= '$lsbversion' AND AAappearedin > '' ";
$select.= "  AND (AAwithdrawnin IS NULL OR AAwithdrawnin > '$lsbversion') ";
$select.= ") ";
$select.= "AND AIarch=$Aid ";
$select.= "AND AIappearedin <= '$lsbversion' AND AIappearedin > '' ";
$select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ";
if( $Aid!=1 and $generic_ints_list ) {
    $select.= "AND Iid NOT IN (";
    $select.= $generic_ints_list;
    $select.= ")";
}
$select.= " GROUP BY Iname";
$select.= " ORDER BY Iname";

print $select,"\n" if $trace;
$eh = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$eh->execute or die "Couldn't execute $select query: ".DBI->errstr;
for (1..$eh->rows) {
    $eentry = $eh->fetchrow_hashref;
    next if ($eentry->{'Iname'} =~ m/^_Z/);   # skip C++ names

    specdb::display_interface($eentry);
    $totrows++;
}
$eh->finish;
if($totrows == 0) {
    #
    # one of two things ....
    # either there was no data for this architecture,
    # or there's no data at all (its a header associated entirely
    # with interfaces/constants that are not part of the LSB)
    #
    # Check to see if there is ANY data ... same queries, but not arch
    # dependant
    #
    # if HGid is not defined, then this is a bogus header.
    #
    if(!defined($HGid)) { $dbh->disconnect; exit 0; }
    $select = "SELECT * FROM Constant ";
    $select.= "LEFT JOIN ArchConst ON Cid=ACcid ";
    $select.= "WHERE Cheadgroup=$HGid ";
    $select.= "AND Ctype<>'header_depend' ";
    $select.= "AND ACappearedin <= '$lsbversion' AND ACappearedin > '' ";
    $select.= "AND (ACwithdrawnin IS NULL OR ACwithdrawnin > '$lsbversion') ";
    $select.= "LIMIT 1";
    print STDERR $select,"\n" if $trace;
    $ch = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
    $ch->execute or die "Couldn't execute $select query: ".DBI->errstr;
    if ($ch->rows == 0) {
        $select = "SELECT * FROM Type ";
        $select.= "LEFT JOIN ArchType ON ATtid=Tid ";
        $select.= "WHERE Theadgroup=$HGid ";
        $select.= "AND ATappearedin <= '$lsbversion' AND ATappearedin > '' ";
        $select.= "AND (ATwithdrawnin IS NULL OR ATwithdrawnin >'$lsbversion') ";
        $select.= "LIMIT 1";
        print STDERR $select,"\n" if $trace;
        $th = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
        $th->execute or die "Couldn't execute $select query: ".DBI->errstr;
        if ($th->rows == 0) {$ch->finish; $th->finish; $dbh->disconnect; exit 0; } # Nothing found
        $th->finish;
    }
    $ch->finish;
    printf "/*\n";
    printf " * This header is architecture %s\n",
        $Aid == 1 ? "dependent" : "neutral";
    printf " * Please refer to the %s specification for details\n",
        $Aid == 1 ? "specific architecture" : "generic";
    printf " */\n";
}

specdb::finishQueries();
$dbh->disconnect;


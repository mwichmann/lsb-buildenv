
#define G_TYPE_APPLICATION	(g_application_get_type ())
#define G_APPLICATION_CLASS(class)	(G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_APPLICATION, GApplicationClass))
#define G_IS_APPLICATION_CLASS(class)	(G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_APPLICATION))
#define G_APPLICATION(inst)	(G_TYPE_CHECK_INSTANCE_CAST ((inst), G_TYPE_APPLICATION, GApplication))
#define G_IS_APPLICATION(inst)	(G_TYPE_CHECK_INSTANCE_TYPE ((inst), G_TYPE_APPLICATION))
#define G_APPLICATION_GET_CLASS(inst)	(G_TYPE_INSTANCE_GET_CLASS ((inst), G_TYPE_APPLICATION, GApplicationClass))

typedef struct _GApplicationPrivate GApplicationPrivate;
typedef struct _GApplicationClass {
    GObjectClass parent_class;
    void (*startup) (GApplication * application);
    void (*activate) (GApplication * application);
    void (*open) (GApplication * application, GFile * *files, gint n_files,
		  const gchar * hint);
    int (*command_line) (GApplication * application,
			 GApplicationCommandLine * command_line);
     gboolean(*local_command_line) (GApplication * application,
				    gchar * **arguments, int *exit_status);
    void (*before_emit) (GApplication * application,
			 GVariant * platform_data);
    void (*after_emit) (GApplication * application,
			GVariant * platform_data);
    void (*add_platform_data) (GApplication * application,
			       GVariantBuilder * builder);
    void (*quit_mainloop) (GApplication * application);
    void (*run_mainloop) (GApplication * application);
    void (*shutdown) (GApplication * application);
    gpointer padding[11];
} GApplicationClass;
struct _GApplication {
    GObject parent_instance;
    GApplicationPrivate *priv;
};
extern void g_application_activate(GApplication * application);
extern const char *g_application_get_application_id(GApplication *
						    application);
extern GApplication *g_application_get_default(void);
extern GApplicationFlags g_application_get_flags(GApplication *
						 application);
extern guint g_application_get_inactivity_timeout(GApplication *
						  application);
extern gboolean g_application_get_is_registered(GApplication *
						application);
extern gboolean g_application_get_is_remote(GApplication * application);
extern GType g_application_get_type(void);
extern void g_application_hold(GApplication * application);
extern gboolean g_application_id_is_valid(const char *application_id);
extern GApplication *g_application_new(const char *application_id,
				       GApplicationFlags flags);
extern void g_application_open(GApplication * application, GFile * *files,
			       gint n_files, const char *hint);
extern void g_application_quit(GApplication * application);
extern gboolean g_application_register(GApplication * application,
				       GCancellable * cancellable,
				       GError * *error);
extern void g_application_release(GApplication * application);
extern int g_application_run(GApplication * application, int argc,
			     void argv);
extern void g_application_set_action_group(GApplication * application,
					   GActionGroup * action_group);
extern void g_application_set_application_id(GApplication * application,
					     const char *application_id);
extern void g_application_set_default(GApplication * application);
extern void g_application_set_flags(GApplication * application,
				    GApplicationFlags flags);
extern void g_application_set_inactivity_timeout(GApplication *
						 application,
						 guint inactivity_timeout);

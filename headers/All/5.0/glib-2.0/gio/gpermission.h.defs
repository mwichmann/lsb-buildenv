
#define G_TYPE_PERMISSION	(g_permission_get_type ())
#define G_PERMISSION_CLASS(class)	(G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_PERMISSION, GPermissionClass))
#define G_IS_PERMISSION_CLASS(class)	(G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_PERMISSION))
#define G_PERMISSION(inst)	(G_TYPE_CHECK_INSTANCE_CAST ((inst), G_TYPE_PERMISSION, GPermission))
#define G_IS_PERMISSION(inst)	(G_TYPE_CHECK_INSTANCE_TYPE ((inst), G_TYPE_PERMISSION))
#define G_PERMISSION_GET_CLASS(inst)	(G_TYPE_INSTANCE_GET_CLASS ((inst), G_TYPE_PERMISSION, GPermissionClass))

typedef struct _GPermissionPrivate GPermissionPrivate;
typedef struct _GPermissionClass {
    GObjectClass parent_class;
     gboolean(*acquire) (GPermission * permission,
			 GCancellable * cancellable, GError * *error);
    void (*acquire_async) (GPermission * permission,
			   GCancellable * cancellable,
			   GAsyncReadyCallback callback,
			   gpointer user_data);
     gboolean(*acquire_finish) (GPermission * permission,
				GAsyncResult * result, GError * *error);
     gboolean(*release) (GPermission * permission,
			 GCancellable * cancellable, GError * *error);
    void (*release_async) (GPermission * permission,
			   GCancellable * cancellable,
			   GAsyncReadyCallback callback,
			   gpointer user_data);
     gboolean(*release_finish) (GPermission * permission,
				GAsyncResult * result, GError * *error);
    gpointer reserved[16];
} GPermissionClass;
struct _GPermission {
    GObject parent_instance;
    GPermissionPrivate *priv;
};
extern gboolean g_permission_acquire(GPermission * permission,
				     GCancellable * cancellable,
				     GError * *error);
extern void g_permission_acquire_async(GPermission * permission,
				       GCancellable * cancellable,
				       GAsyncReadyCallback callback,
				       gpointer user_data);
extern gboolean g_permission_acquire_finish(GPermission * permission,
					    GAsyncResult * result,
					    GError * *error);
extern gboolean g_permission_get_allowed(GPermission * permission);
extern gboolean g_permission_get_can_acquire(GPermission * permission);
extern gboolean g_permission_get_can_release(GPermission * permission);
extern GType g_permission_get_type(void);
extern void g_permission_impl_update(GPermission * permission,
				     gboolean allowed,
				     gboolean can_acquire,
				     gboolean can_release);
extern gboolean g_permission_release(GPermission * permission,
				     GCancellable * cancellable,
				     GError * *error);
extern void g_permission_release_async(GPermission * permission,
				       GCancellable * cancellable,
				       GAsyncReadyCallback callback,
				       gpointer user_data);
extern gboolean g_permission_release_finish(GPermission * permission,
					    GAsyncResult * result,
					    GError * *error);

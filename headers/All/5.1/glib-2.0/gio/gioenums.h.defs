
typedef enum {
    G_APP_INFO_CREATE_NONE,
    G_APP_INFO_CREATE_NEEDS_TERMINAL = (1 << 0),
    G_APP_INFO_CREATE_SUPPORTS_URIS = (1 << 1),
    G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = (1 << 2)
} GAppInfoCreateFlags;
typedef enum {
    G_CONVERTER_NO_FLAGS,
    G_CONVERTER_INPUT_AT_END = (1 << 0),
    G_CONVERTER_FLUSH = (1 << 1)
} GConverterFlags;
typedef enum {
    G_CONVERTER_ERROR,
    G_CONVERTER_CONVERTED,
    G_CONVERTER_FINISHED,
    G_CONVERTER_FLUSHED
} GConverterResult;
typedef enum {
    G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
    G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
    G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
} GDataStreamByteOrder;
typedef enum {
    G_DATA_STREAM_NEWLINE_TYPE_LF,
    G_DATA_STREAM_NEWLINE_TYPE_CR,
    G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
    G_DATA_STREAM_NEWLINE_TYPE_ANY
} GDataStreamNewlineType;
typedef enum {
    G_FILE_ATTRIBUTE_TYPE_INVALID,
    G_FILE_ATTRIBUTE_TYPE_STRING,
    G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
    G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
    G_FILE_ATTRIBUTE_TYPE_UINT32,
    G_FILE_ATTRIBUTE_TYPE_INT32,
    G_FILE_ATTRIBUTE_TYPE_UINT64,
    G_FILE_ATTRIBUTE_TYPE_INT64,
    G_FILE_ATTRIBUTE_TYPE_OBJECT,
    G_FILE_ATTRIBUTE_TYPE_STRINGV
} GFileAttributeType;
typedef enum {
    G_FILE_ATTRIBUTE_INFO_NONE,
    G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = (1 << 0),
    G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (1 << 1)
} GFileAttributeInfoFlags;
typedef enum {
    G_FILE_ATTRIBUTE_STATUS_UNSET,
    G_FILE_ATTRIBUTE_STATUS_SET,
    G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
} GFileAttributeStatus;
typedef enum {
    G_FILE_QUERY_INFO_NONE,
    G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 << 0)
} GFileQueryInfoFlags;
typedef enum {
    G_FILE_CREATE_NONE,
    G_FILE_CREATE_PRIVATE = (1 << 0),
    G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
} GFileCreateFlags;
typedef enum {
    G_MOUNT_MOUNT_NONE
} GMountMountFlags;
typedef enum {
    G_MOUNT_UNMOUNT_NONE,
    G_MOUNT_UNMOUNT_FORCE = (1 << 0)
} GMountUnmountFlags;
typedef enum {
    G_DRIVE_START_NONE
} GDriveStartFlags;
typedef enum {
    G_DRIVE_START_STOP_TYPE_UNKNOWN,
    G_DRIVE_START_STOP_TYPE_SHUTDOWN,
    G_DRIVE_START_STOP_TYPE_NETWORK,
    G_DRIVE_START_STOP_TYPE_MULTIDISK,
    G_DRIVE_START_STOP_TYPE_PASSWORD
} GDriveStartStopType;
typedef enum {
    G_FILE_COPY_NONE,
    G_FILE_COPY_OVERWRITE = (1 << 0),
    G_FILE_COPY_BACKUP = (1 << 1),
    G_FILE_COPY_NOFOLLOW_SYMLINKS = (1 << 2),
    G_FILE_COPY_ALL_METADATA = (1 << 3),
    G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 << 4),
    G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 << 5)
} GFileCopyFlags;
typedef enum {
    G_FILE_MONITOR_NONE,
    G_FILE_MONITOR_WATCH_MOUNTS = (1 << 0),
    G_FILE_MONITOR_SEND_MOVED = (1 << 1)
} GFileMonitorFlags;
typedef enum {
    G_FILE_TYPE_UNKNOWN,
    G_FILE_TYPE_REGULAR,
    G_FILE_TYPE_DIRECTORY,
    G_FILE_TYPE_SYMBOLIC_LINK,
    G_FILE_TYPE_SPECIAL,
    G_FILE_TYPE_SHORTCUT,
    G_FILE_TYPE_MOUNTABLE
} GFileType;
typedef enum {
    G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS,
    G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
    G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;
typedef enum {
    G_FILE_MONITOR_EVENT_CHANGED,
    G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
    G_FILE_MONITOR_EVENT_DELETED,
    G_FILE_MONITOR_EVENT_CREATED,
    G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
    G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
    G_FILE_MONITOR_EVENT_UNMOUNTED,
    G_FILE_MONITOR_EVENT_MOVED
} GFileMonitorEvent;
typedef enum {
    G_IO_ERROR_FAILED,
    G_IO_ERROR_NOT_FOUND,
    G_IO_ERROR_EXISTS,
    G_IO_ERROR_IS_DIRECTORY,
    G_IO_ERROR_NOT_DIRECTORY,
    G_IO_ERROR_NOT_EMPTY,
    G_IO_ERROR_NOT_REGULAR_FILE,
    G_IO_ERROR_NOT_SYMBOLIC_LINK,
    G_IO_ERROR_NOT_MOUNTABLE_FILE,
    G_IO_ERROR_FILENAME_TOO_LONG,
    G_IO_ERROR_INVALID_FILENAME,
    G_IO_ERROR_TOO_MANY_LINKS,
    G_IO_ERROR_NO_SPACE,
    G_IO_ERROR_INVALID_ARGUMENT,
    G_IO_ERROR_PERMISSION_DENIED,
    G_IO_ERROR_NOT_SUPPORTED,
    G_IO_ERROR_NOT_MOUNTED,
    G_IO_ERROR_ALREADY_MOUNTED,
    G_IO_ERROR_CLOSED,
    G_IO_ERROR_CANCELLED,
    G_IO_ERROR_PENDING,
    G_IO_ERROR_READ_ONLY,
    G_IO_ERROR_CANT_CREATE_BACKUP,
    G_IO_ERROR_WRONG_ETAG,
    G_IO_ERROR_TIMED_OUT,
    G_IO_ERROR_WOULD_RECURSE,
    G_IO_ERROR_BUSY,
    G_IO_ERROR_WOULD_BLOCK,
    G_IO_ERROR_HOST_NOT_FOUND,
    G_IO_ERROR_WOULD_MERGE,
    G_IO_ERROR_FAILED_HANDLED,
    G_IO_ERROR_TOO_MANY_OPEN_FILES,
    G_IO_ERROR_NOT_INITIALIZED,
    G_IO_ERROR_ADDRESS_IN_USE,
    G_IO_ERROR_PARTIAL_INPUT,
    G_IO_ERROR_INVALID_DATA,
    G_IO_ERROR_DBUS_ERROR,
    G_IO_ERROR_HOST_UNREACHABLE,
    G_IO_ERROR_NETWORK_UNREACHABLE,
    G_IO_ERROR_CONNECTION_REFUSED,
    G_IO_ERROR_PROXY_FAILED,
    G_IO_ERROR_PROXY_AUTH_FAILED,
    G_IO_ERROR_PROXY_NEED_AUTH,
    G_IO_ERROR_PROXY_NOT_ALLOWED
} GIOErrorEnum;
typedef enum {
    G_ASK_PASSWORD_NEED_PASSWORD = (1 << 0),
    G_ASK_PASSWORD_NEED_USERNAME = (1 << 1),
    G_ASK_PASSWORD_NEED_DOMAIN = (1 << 2),
    G_ASK_PASSWORD_SAVING_SUPPORTED = (1 << 3),
    G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (1 << 4)
} GAskPasswordFlags;
typedef enum {
    G_PASSWORD_SAVE_NEVER,
    G_PASSWORD_SAVE_FOR_SESSION,
    G_PASSWORD_SAVE_PERMANENTLY
} GPasswordSave;
typedef enum {
    G_MOUNT_OPERATION_HANDLED,
    G_MOUNT_OPERATION_ABORTED,
    G_MOUNT_OPERATION_UNHANDLED
} GMountOperationResult;
typedef enum {
    G_OUTPUT_STREAM_SPLICE_NONE,
    G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (1 << 0),
    G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (1 << 1)
} GOutputStreamSpliceFlags;
typedef enum {
    G_IO_STREAM_SPLICE_NONE,
    G_IO_STREAM_SPLICE_CLOSE_STREAM1 = (1 << 0),
    G_IO_STREAM_SPLICE_CLOSE_STREAM2 = (1 << 1),
    G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = (1 << 2)
} GIOStreamSpliceFlags;
typedef enum {
    G_EMBLEM_ORIGIN_UNKNOWN,
    G_EMBLEM_ORIGIN_DEVICE,
    G_EMBLEM_ORIGIN_LIVEMETADATA,
    G_EMBLEM_ORIGIN_TAG
} GEmblemOrigin;
typedef enum {
    G_RESOLVER_ERROR_NOT_FOUND,
    G_RESOLVER_ERROR_TEMPORARY_FAILURE,
    G_RESOLVER_ERROR_INTERNAL
} GResolverError;
typedef enum {
    G_RESOURCE_ERROR_NOT_FOUND,
    G_RESOURCE_ERROR_INTERNAL
} GResourceError;
typedef enum {
    G_RESOURCE_FLAGS_NONE,
    G_RESOURCE_FLAGS_COMPRESSED = (1 << 0)
} GResourceFlags;
typedef enum {
    G_RESOURCE_LOOKUP_FLAGS_NONE
} GResourceLookupFlags;
typedef enum {
    G_SOCKET_FAMILY_INVALID,
    G_SOCKET_FAMILY_UNIX,
    G_SOCKET_FAMILY_IPV4,
    G_SOCKET_FAMILY_IPV6
} GSocketFamily;
typedef enum {
    G_SOCKET_TYPE_INVALID,
    G_SOCKET_TYPE_STREAM,
    G_SOCKET_TYPE_DATAGRAM,
    G_SOCKET_TYPE_SEQPACKET
} GSocketType;
typedef enum {
    G_SOCKET_MSG_NONE,
    G_SOCKET_MSG_OOB,
    G_SOCKET_MSG_PEEK,
    G_SOCKET_MSG_DONTROUTE
} GSocketMsgFlags;
typedef enum {
    G_SOCKET_PROTOCOL_UNKNOWN = -1,
    G_SOCKET_PROTOCOL_DEFAULT,
    G_SOCKET_PROTOCOL_TCP,
    G_SOCKET_PROTOCOL_UDP,
    G_SOCKET_PROTOCOL_SCTP
} GSocketProtocol;
typedef enum {
    G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
    G_ZLIB_COMPRESSOR_FORMAT_GZIP,
    G_ZLIB_COMPRESSOR_FORMAT_RAW
} GZlibCompressorFormat;
typedef enum {
    G_UNIX_SOCKET_ADDRESS_INVALID,
    G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
    G_UNIX_SOCKET_ADDRESS_PATH,
    G_UNIX_SOCKET_ADDRESS_ABSTRACT,
    G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
} GUnixSocketAddressType;
typedef enum {
    G_BUS_TYPE_STARTER = -1,
    G_BUS_TYPE_NONE,
    G_BUS_TYPE_SYSTEM,
    G_BUS_TYPE_SESSION
} GBusType;
typedef enum {
    G_BUS_NAME_OWNER_FLAGS_NONE,
    G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = (1 << 0),
    G_BUS_NAME_OWNER_FLAGS_REPLACE = (1 << 1)
} GBusNameOwnerFlags;
typedef enum {
    G_BUS_NAME_WATCHER_FLAGS_NONE,
    G_BUS_NAME_WATCHER_FLAGS_AUTO_START = (1 << 0)
} GBusNameWatcherFlags;
typedef enum {
    G_DBUS_PROXY_FLAGS_NONE,
    G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = (1 << 0),
    G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = (1 << 1),
    G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = (1 << 2),
    G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = (1 << 3)
} GDBusProxyFlags;
typedef enum {
    G_DBUS_ERROR_FAILED,
    G_DBUS_ERROR_NO_MEMORY,
    G_DBUS_ERROR_SERVICE_UNKNOWN,
    G_DBUS_ERROR_NAME_HAS_NO_OWNER,
    G_DBUS_ERROR_NO_REPLY,
    G_DBUS_ERROR_IO_ERROR,
    G_DBUS_ERROR_BAD_ADDRESS,
    G_DBUS_ERROR_NOT_SUPPORTED,
    G_DBUS_ERROR_LIMITS_EXCEEDED,
    G_DBUS_ERROR_ACCESS_DENIED,
    G_DBUS_ERROR_AUTH_FAILED,
    G_DBUS_ERROR_NO_SERVER,
    G_DBUS_ERROR_TIMEOUT,
    G_DBUS_ERROR_NO_NETWORK,
    G_DBUS_ERROR_ADDRESS_IN_USE,
    G_DBUS_ERROR_DISCONNECTED,
    G_DBUS_ERROR_INVALID_ARGS,
    G_DBUS_ERROR_FILE_NOT_FOUND,
    G_DBUS_ERROR_FILE_EXISTS,
    G_DBUS_ERROR_UNKNOWN_METHOD,
    G_DBUS_ERROR_TIMED_OUT,
    G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,
    G_DBUS_ERROR_MATCH_RULE_INVALID,
    G_DBUS_ERROR_SPAWN_EXEC_FAILED,
    G_DBUS_ERROR_SPAWN_FORK_FAILED,
    G_DBUS_ERROR_SPAWN_CHILD_EXITED,
    G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,
    G_DBUS_ERROR_SPAWN_FAILED,
    G_DBUS_ERROR_SPAWN_SETUP_FAILED,
    G_DBUS_ERROR_SPAWN_CONFIG_INVALID,
    G_DBUS_ERROR_SPAWN_SERVICE_INVALID,
    G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,
    G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,
    G_DBUS_ERROR_SPAWN_FILE_INVALID,
    G_DBUS_ERROR_SPAWN_NO_MEMORY,
    G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,
    G_DBUS_ERROR_INVALID_SIGNATURE,
    G_DBUS_ERROR_INVALID_FILE_CONTENT,
    G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN,
    G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,
    G_DBUS_ERROR_OBJECT_PATH_IN_USE
} GDBusError;
typedef enum {
    G_DBUS_CONNECTION_FLAGS_NONE,
    G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = (1 << 0),
    G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = (1 << 1),
    G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1 << 2),
    G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = (1 << 3),
    G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = (1 << 4)
} GDBusConnectionFlags;
typedef enum {
    G_DBUS_CAPABILITY_FLAGS_NONE,
    G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = (1 << 0)
} GDBusCapabilityFlags;
typedef enum {
    G_DBUS_CALL_FLAGS_NONE,
    G_DBUS_CALL_FLAGS_NO_AUTO_START = (1 << 0)
} GDBusCallFlags;
typedef enum {
    G_DBUS_MESSAGE_TYPE_INVALID,
    G_DBUS_MESSAGE_TYPE_METHOD_CALL,
    G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
    G_DBUS_MESSAGE_TYPE_ERROR,
    G_DBUS_MESSAGE_TYPE_SIGNAL
} GDBusMessageType;
typedef enum {
    G_DBUS_MESSAGE_FLAGS_NONE,
    G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = (1 << 0),
    G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = (1 << 1)
} GDBusMessageFlags;
typedef enum {
    G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
    G_DBUS_MESSAGE_HEADER_FIELD_PATH,
    G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
    G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
    G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
    G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
    G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
    G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
    G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
    G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
} GDBusMessageHeaderField;
typedef enum {
    G_DBUS_PROPERTY_INFO_FLAGS_NONE,
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE = (1 << 0),
    G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = (1 << 1)
} GDBusPropertyInfoFlags;
typedef enum {
    G_DBUS_SUBTREE_FLAGS_NONE,
    G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = (1 << 0)
} GDBusSubtreeFlags;
typedef enum {
    G_DBUS_SERVER_FLAGS_NONE,
    G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = (1 << 0),
    G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1 << 1)
} GDBusServerFlags;
typedef enum {
    G_DBUS_SIGNAL_FLAGS_NONE,
    G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = (1 << 0)
} GDBusSignalFlags;
typedef enum {
    G_DBUS_SEND_MESSAGE_FLAGS_NONE,
    G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = (1 << 0)
} GDBusSendMessageFlags;
typedef enum {
    G_CREDENTIALS_TYPE_INVALID,
    G_CREDENTIALS_TYPE_LINUX_UCRED,
    G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
    G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED
} GCredentialsType;
typedef enum {
    G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN,
    G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN
} GDBusMessageByteOrder;
typedef enum {
    G_APPLICATION_FLAGS_NONE,
    G_APPLICATION_IS_SERVICE = (1 << 0),
    G_APPLICATION_IS_LAUNCHER = (1 << 1),
    G_APPLICATION_HANDLES_OPEN = (1 << 2),
    G_APPLICATION_HANDLES_COMMAND_LINE = (1 << 3),
    G_APPLICATION_SEND_ENVIRONMENT = (1 << 4),
    G_APPLICATION_NON_UNIQUE = (1 << 5)
} GApplicationFlags;
typedef enum {
    G_TLS_ERROR_UNAVAILABLE,
    G_TLS_ERROR_MISC,
    G_TLS_ERROR_BAD_CERTIFICATE,
    G_TLS_ERROR_NOT_TLS,
    G_TLS_ERROR_HANDSHAKE,
    G_TLS_ERROR_CERTIFICATE_REQUIRED,
    G_TLS_ERROR_EOF
} GTlsError;
typedef enum {
    G_TLS_CERTIFICATE_UNKNOWN_CA = (1 << 0),
    G_TLS_CERTIFICATE_BAD_IDENTITY = (1 << 1),
    G_TLS_CERTIFICATE_NOT_ACTIVATED = (1 << 2),
    G_TLS_CERTIFICATE_EXPIRED = (1 << 3),
    G_TLS_CERTIFICATE_REVOKED = (1 << 4),
    G_TLS_CERTIFICATE_INSECURE = (1 << 5),
    G_TLS_CERTIFICATE_GENERIC_ERROR = (1 << 6),
    G_TLS_CERTIFICATE_VALIDATE_ALL = 0x007f
} GTlsCertificateFlags;
typedef enum {
    G_TLS_AUTHENTICATION_NONE,
    G_TLS_AUTHENTICATION_REQUESTED,
    G_TLS_AUTHENTICATION_REQUIRED
} GTlsAuthenticationMode;
typedef enum {
    G_TLS_REHANDSHAKE_NEVER,
    G_TLS_REHANDSHAKE_SAFELY,
    G_TLS_REHANDSHAKE_UNSAFELY
} GTlsRehandshakeMode;
typedef enum _GTlsPasswordFlags {
    G_TLS_PASSWORD_NONE,
    G_TLS_PASSWORD_RETRY = 1 << 1,
    G_TLS_PASSWORD_MANY_TRIES = 1 << 2,
    G_TLS_PASSWORD_FINAL_TRY = 1 << 3
} GTlsPasswordFlags;
typedef enum {
    G_TLS_INTERACTION_UNHANDLED,
    G_TLS_INTERACTION_HANDLED,
    G_TLS_INTERACTION_FAILED
} GTlsInteractionResult;
typedef enum {
    G_DBUS_INTERFACE_SKELETON_FLAGS_NONE,
    G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD =
	(1 << 0)
} GDBusInterfaceSkeletonFlags;
typedef enum {
    G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,
    G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = (1 << 0)
} GDBusObjectManagerClientFlags;
typedef enum {
    G_TLS_DATABASE_VERIFY_NONE
} GTlsDatabaseVerifyFlags;
typedef enum {
    G_TLS_DATABASE_LOOKUP_NONE,
    G_TLS_DATABASE_LOOKUP_KEYPAIR
} GTlsDatabaseLookupFlags;
typedef enum {
    G_IO_MODULE_SCOPE_NONE,
    G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
} GIOModuleScopeFlags;
typedef enum {
    G_SOCKET_CLIENT_RESOLVING,
    G_SOCKET_CLIENT_RESOLVED,
    G_SOCKET_CLIENT_CONNECTING,
    G_SOCKET_CLIENT_CONNECTED,
    G_SOCKET_CLIENT_PROXY_NEGOTIATING,
    G_SOCKET_CLIENT_PROXY_NEGOTIATED,
    G_SOCKET_CLIENT_TLS_HANDSHAKING,
    G_SOCKET_CLIENT_TLS_HANDSHAKED,
    G_SOCKET_CLIENT_COMPLETE
} GSocketClientEvent;

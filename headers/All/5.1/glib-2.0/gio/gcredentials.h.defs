
#define G_TYPE_CREDENTIALS	(g_credentials_get_type ())
#define G_CREDENTIALS_CLASS(k)	(G_TYPE_CHECK_CLASS_CAST((k), G_TYPE_CREDENTIALS, GCredentialsClass))
#define G_IS_CREDENTIALS_CLASS(k)	(G_TYPE_CHECK_CLASS_TYPE ((k), G_TYPE_CREDENTIALS))
#define G_CREDENTIALS(o)	(G_TYPE_CHECK_INSTANCE_CAST ((o), G_TYPE_CREDENTIALS, GCredentials))
#define G_IS_CREDENTIALS(o)	(G_TYPE_CHECK_INSTANCE_TYPE ((o), G_TYPE_CREDENTIALS))
#define G_CREDENTIALS_GET_CLASS(o)	(G_TYPE_INSTANCE_GET_CLASS ((o), G_TYPE_CREDENTIALS, GCredentialsClass))

typedef struct _GCredentialsClass GCredentialsClass;
extern gpointer g_credentials_get_native(GCredentials * credentials,
					 GCredentialsType native_type);
extern GType g_credentials_get_type(void);
extern uid_t g_credentials_get_unix_user(GCredentials * credentials,
					 GError * *error);
extern gboolean g_credentials_is_same_user(GCredentials * credentials,
					   GCredentials *
					   other_credentials,
					   GError * *error);
extern GCredentials *g_credentials_new(void);
extern void g_credentials_set_native(GCredentials * credentials,
				     GCredentialsType native_type,
				     gpointer native);
extern gboolean g_credentials_set_unix_user(GCredentials * credentials,
					    uid_t uid, GError * *error);
extern gchar *g_credentials_to_string(GCredentials * credentials);


#define G_UNIX_SOCKET_ADDRESS_CLASS(k)	(G_TYPE_CHECK_CLASS_CAST((k), G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass))
#define G_IS_UNIX_SOCKET_ADDRESS_CLASS(k)	(G_TYPE_CHECK_CLASS_TYPE ((k), G_TYPE_UNIX_SOCKET_ADDRESS))
#define G_UNIX_SOCKET_ADDRESS(o)	(G_TYPE_CHECK_INSTANCE_CAST ((o), G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddress))
#define G_IS_UNIX_SOCKET_ADDRESS(o)	(G_TYPE_CHECK_INSTANCE_TYPE ((o), G_TYPE_UNIX_SOCKET_ADDRESS))
#define G_UNIX_SOCKET_ADDRESS_GET_CLASS(o)	(G_TYPE_INSTANCE_GET_CLASS ((o), G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass))
#define G_TYPE_UNIX_SOCKET_ADDRESS	(g_unix_socket_address_get_type ())

typedef struct _GUnixSocketAddress {
    GSocketAddress parent_instance;
    GUnixSocketAddressPrivate *priv;
} GUnixSocketAddress;
typedef struct _GUnixSocketAddressClass {
    GSocketAddressClass parent_class;
} GUnixSocketAddressClass;
typedef struct _GUnixSocketAddressPrivate GUnixSocketAddressPrivate;
extern gboolean g_unix_socket_address_abstract_names_supported(void);
extern GUnixSocketAddressType
g_unix_socket_address_get_address_type(GUnixSocketAddress * address);
extern gboolean g_unix_socket_address_get_is_abstract(GUnixSocketAddress *
						      address);
extern const char *g_unix_socket_address_get_path(GUnixSocketAddress *
						  address);
extern gsize g_unix_socket_address_get_path_len(GUnixSocketAddress *
						address);
extern GType g_unix_socket_address_get_type(void);
extern GSocketAddress *g_unix_socket_address_new(const char *path);
extern GSocketAddress *g_unix_socket_address_new_abstract(const char *path,
							  gint path_len);
extern GSocketAddress *g_unix_socket_address_new_with_type(const char
							   *path,
							   gint path_len,
							   GUnixSocketAddressType
							   type);

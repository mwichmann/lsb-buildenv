#!/usr/bin/perl

#
# This script should be pulling the info from the IntParams table instead
#

use Getopt::Long;
use DBI;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub
usage()
{
die "mkfuncprototype -h <headername> -v <lsbversion>";
}

# Uncomment to trace SQL statments
#$trace=1;

sub
displaytype($)
{
local ($param) = @_;
local(%select,$sth,$type);

if( $param->{'Ttype'} eq "Intrinsic" ) {
	print $param->{'Tname'};
	return;
}

if( $param->{'Ttype'} eq "Pointer" ) {
	$select = "SELECT * FROM Type WHERE Tid=".$param->{'Tbasetype'};
	$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	$type = $sth->fetchrow_hashref;
	$sth->finish;
	displaytype($type);
	print " *";
	return;
}

if( $param->{'Ttype'} eq "Struct" ) {
	print "struct ".$param->{'Tname'};
	return;
}

if( $param->{'Ttype'} eq "Typedef" ) {
	print $param->{'Tname'};
	return;
}

if( $param->{'Ttype'} eq "Union" ) {
	print "union ".$param->{'Tname'};
	return;
}

if( $param->{'Ttype'} eq "Enum" ) {
	print $param->{'Tname'};
	return;
}

print $param->{'Ttype'};
}

GetOptions("h=s" => \$headname,
			"v=s" => \$lsbversion);
 
if( !$headname ) { usage(); }  
if( !$lsbversion ) { usage(); }  

$headname =~ s/^\.\///;

$dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

$select = "SELECT * FROM Interface,Header,Type ";
$select.= "WHERE (AIappearedin <= '$lsbversion' and AIappearedin<>'') ";
$select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ";
$select.= "AND Iheader=Hid AND Hname=".$dbh->quote($headname)." ";
$select.= "AND Ireturn=Tid";
print $select,"\n" if $trace;
$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

for(1..$sth->rows) {
	$entry = $sth->fetchrow_hashref;
	if( entry->{'Itype'} eq "Function" ) {
		if( entry->{'Ttype'} eq 'FuncPtr' ) {
			next;
			}
		displaytype($entry);
		printf " %s(",entry->{'Iname'};
		$select = "SELECT Tname,Ttype,Tbasetype FROM Type,Parameter ";
		$select.= "WHERE Pint=".entry->{'Iid'}." AND Ptype=Tid ";
		$select.= "ORDER BY  Ppos";
		print $select,"\n" if $trace;
		$sth2 = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
		$sth2->execute or die "Couldn't execute $select query: ".DBI->errstr;
		if( $sth2->numrows != 0 ) {
			$entry2 = $sth2->fetchrow_hashref;
			displaytype($entry2);
			for(2..$sth2->numrows) {
				$entry2 = $sth2->fetchrow_hashref;
				print ", ";
				displaytype(entry2);
			}
		}
		$sth2->finish;
	printf ");\n";
	}
	if( entry->{'Itype'} eq "Data" ) {
		displaytype($entry);
		printf " %s;\n",entry->{'Iname'};
	}
	if( entry->{'Itype'} eq "Alias" ) {
		displaytype($entry);
		printf " %s;\n",entry->{'Iname'};
	}
	if( entry->{'Itype'} eq "Common" ) {
		displaytype($entry);
		printf " %s;\n",entry->{'Iname'};
	}
}
$sth->finish;

$dbh->disconnect;

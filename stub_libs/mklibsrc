#!/usr/bin/perl

use Getopt::Long;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mklibsrc -a <archname>\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
GetOptions("a=s" => \$archname);

if( !$archname ) { usage(); }

#
# 2) Establish connection to the database
#
$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER,$LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) Get Architecture info
#
$select = "SELECT * FROM Architecture WHERE ";
$select.= "Architecture.Aname='All'";
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
%entry=$sth->fetchhash;
$Aallid=$entry{'Aid'};
$select = "SELECT * FROM Architecture WHERE ";
$select.= "Architecture.Aname=".$Dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
%entry=$sth->fetchhash;
$Aid=$entry{'Aid'};

sub dumplib($$)
{
local($Lname,$Lid)=@_;
local(%sth);

$select  = "SELECT DISTINCT Iname,Vname ";
$select .= "FROM Interface,LGInt,LibGroup ";
$select .= "LEFT JOIN Version ON Version.Vid=Interface.Iversion ";
$select .= "WHERE Interface.Iid=LGInt.LGIint ";
$select .= "AND LGInt.LGIlibg=LibGroup.LGid ";
$select .= "AND Interface.Itype='Function' ";
$select .= "AND LibGroup.LGlib=$Lid ";
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $Dbh->errmsg();

for(1..$sth->numrows) {
	%entry=$sth->fetchhash;
	if( $entry{'Vname'} ) {
		printf SRC "__asm__(\".globl _lsb_%s\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.type _lsb_%s,\@function\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"_lsb_%s:\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\tret\");\n";
		printf SRC "__asm__(\".symver _lsb_%s,%s",
				$entry{'Iname'},$entry{'Iname'};
		printf SRC "\@\@%s\"", $entry{'Vname'};
		printf SRC ");\n";
		$Vername{$entry{'Vname'}}=1;
	} else {
		printf SRC "__asm__(\".globl %s\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.type %s,\@function\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"%s:\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\tret\");\n";
		}
	}

$select  = "SELECT DISTINCT Iname,Vname ";
$select .= "FROM Interface,LGInt,LibGroup ";
$select .= "LEFT JOIN Version ON Version.Vid=Interface.Iversion ";
$select .= "WHERE Interface.Iid=LGInt.LGIint ";
$select .= "AND LGInt.LGIlibg=LibGroup.LGid ";
$select .= "AND Interface.Itype='Data' ";
$select .= "AND LibGroup.LGlib=$Lid ";
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $Dbh->errmsg();

for(1..$sth->numrows) {
	%entry=$sth->fetchhash;
	if( $entry{'Vname'} ) {
		printf SRC "__asm__(\".globl _lsb_%s\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.type _lsb_%s,\@object\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.size _lsb_%s,4\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"_lsb_%s:\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.long 0\");\n";
		printf SRC "__asm__(\".symver _lsb_%s,%s",
				$entry{'Iname'},$entry{'Iname'};
		printf SRC "\@\@%s\"", $entry{'Vname'};
		printf SRC ");\n";
		$Vername{$entry{'Vname'}}=1;
	} else {
		printf SRC "__asm__(\".globl %s\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.type %s,\@object\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.size %s,4\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"%s:\");\n",
				$entry{'Iname'};
		printf SRC "__asm__(\"\t.long 0\");\n";
		}
	}

print LIBLINK "\n$Lname.so: $Lname.o\n";

#
# Create the Version file
#
@vers= keys %Vername;
if( $#vers > 0 ) {
	open(VERFILE,">Version.$Lname");
	foreach $ver (sort(keys(%Vername))) {
		print VERFILE "$ver {\n\t*;\n\t};\n";
		}
	close(VERFILE);
	print LIBLINK "\t\$(LD) --version-script Version.$Lname -o \$@ -shared -h $Lrunname \$*.o\n\n";
	} else {
	print LIBLINK "\t\$(LD) -o \$@ -shared -h $Lrunname \$*.o\n\n";
	}
}

#
# 4) Get the list of Libraries
#
$select = "SELECT * FROM Library WHERE ";
$select.= "Library.Larch=$Aid OR Library.Larch=$Aallid ";
$select.= "AND Library.Lstd='Yes'";
print STDERR $select,"\n" if $trace;
$lth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

open(LIBLIST,">liblist")||die "Can't open liblist";
print LIBLIST "LSBLIBS = ";
open(LIBSRC,">libsrc")||die "Can't open libsrc";
print LIBSRC "LSBSRC = ";
open(LIBLINK,">liblink")||die "Can't open liblink";
for(1..$lth->numrows) {
	%entry=$lth->fetchhash;
	$Lid=$entry{'Lid'};
	$Lname=$entry{'Lname'};
	$Lrunname=$entry{'Lrunname'};
	print LIBLIST "\\\n\t$Lname.so";
	print LIBSRC "\\\n\t$Lname.c";
	open(SRC,">$Lname.c") || die "Can't open $Lname.c";
	dumplib($Lname,$Lid);
	close(SRC);
}
close(LIBLINK);
print LIBLIST "\n";
close(LIBLIST);
print LIBSRC "\n";
close(LIBSRC);

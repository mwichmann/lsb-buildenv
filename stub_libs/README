
This directory contain the code that I am playing with to figure out how to
create LSB libraries that allow us to set LSB versions, and map them into
Symbol Version of other libraries.

There isn't a mechanism to say that foo@@LSB_1.0 maps to foo@@GLIBC_2.x, so
we have to create a very thin library that inserts single jmp instuction into
the code path. I don't like this, but it is the best thing that I have been
able to come up with yet.

Currently, we have to build seperate link & run time version of the libraries.
When built a s single library, all functions end up looping back to themselves
because the "default" symbol points to itself.

The Link library provides LSB_1.0 symbol versions. It also declares these to
be the default version for the symbol. This gets copied into the applications
.gnu.version_r section.

The Run library provides the LSB_1.0 symbols, but doesn't declare them to be
the default. Instead, it allows glibc to provide the default, and the jmp foo
calls end up jumping to the glibc versions of the functions.

The one part of this that isn't sorted out yet, is how to specify a different
symbol in the run time library. For instance, let's say the foobar() function
in  glibc 2.2 isn't right, and we want to specifc the GLIBC_2.1 version of this
function. This can be accomplished by fixing the Symbol Version table, but
currently, non of the tools provides a way to do this.

Stuart

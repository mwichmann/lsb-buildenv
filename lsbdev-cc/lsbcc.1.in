.TH lsbcc "1" "" "lsbcc (LSB)" LSB
.SH NAME
lsbcc, lsbc++, lsbcpp \- compiler driver for building LSB conforming applications
.SH SYNOPSIS
.B lsbcc
.RI [ lsbcc-options ]
.RI [ compiler-options ]
.br
.B lsbc++
.RI [ lsbcc-options ]
.RI [ compiler-options ]
.br
.B lsbcpp
.RI [ lsbcc-options ]
.RI [ compiler-options ]
.SH DESCRIPTION
.P
This tool should be used in place of the
.I cc, c++
or
.IR cpp 
command when
building an LSB-conforming program.
.P
LSB-conforming programs must link dynamically only with
LSB-required and application-supplied shared libraries,
as no other libraries can be guaranteed to be present on
an LSB-compliant system.  They must only use specified
interfaces from LSB-required shared libraries. 
LSB programs also need to be linked with 
a special program interpreter which identifies
them as LSB conforming.
.P
The LSB development environment provides
a set of replacement system headers and 
stub dynamic libraries.
These headers and libraries have been
carefully built so that they contain only the interfaces
specified in the LSB. When the stub libraries are
used for link-time symbol resolution, the use of
unspecified interfaces in those libraries will
result in link failures.
.P
.I lsbcc
is designed to apply the LSB build conventions with a
minimum of changes to existing build setups.
When invoked as the compiler, 
it first modifies the command line to follow the
LSB build conventions, then passes the resulting
command line on to the regular compiler, so
.I lsbcc
is effectively a wrapper program.
.P
.IR lsbcc
takes a number of options prefixed with --lsb-, or
alternatively; 
behavior other than the default can be controlled
by a set of environment variables.  Typically command
line options will override options set through environment
variables.

.P
.SH LSBCC OPTIONS
.TP 
--lsb-help
Display help message.  The compiler 
.I --help 
option will also display the output from --lsb-help.
.TP 
--lsb-version
Display the LSB versions this tool can build for.
The default version is listed first.
.TP 
--lsb-verbose
The complete command line passed to either the C or C++ compiler
will be printed to stderr just prior to execution.  This helps
see the effects of 
.I lsbcc 
and options.
.TP 
--lsb-cc=<path to c compiler>
Specifies the name of the C compiler to invoke with the modified
argument list. If this option or the LSBCC environment
variable is not set, the default 
.I cc
will be used.  This setting overrides the LSBCC environment setting.
.TP 
--lsb-cxx=<path to c++ compiler>
Specifies the name of the C++ compiler to invoke with the modified
argument list.  If this option or the LSBCCX environment
variable is not set, the default 
.I c++
will be used.  This setting overrides the LSBCXX environment setting.
.TP
--lsb-cpp=<path to c preprocessor>
Specifies the name of the C preprocessor to invoke with the modified
argument list. If this option or the LSBCPP environment
variable is not set, the default 
.I cpp
will be used. This option overrides the LSBCPP environment setting.
.TP 
--lsb-forcefeatures
This causes 
.I lsbcc 
to insert macro defines for all of the 
interface features it supports (e.g. -DHAVE_BSD, -DHAVE_GNU...).
These macros are not needed for the LSB headers but may
select necessary behavior in non-LSB headers that have
conditionals. However, predefining the macros may collide with
application definitions of the macros, so this is no longer
the default behavior for 
.IR lsbcc .
.TP 
--lsb-libpath=<lsb_lib_path>
Specifies the location of the LSB stub libraries that will
be linked against.  If this option or the LSBCC_LIBS environment
variable is not set, the default 
.I /opt/lsb/lib
will be used.  This option overrides the LSBCC_LIBS environment setting.
.TP 
--lsb-includepath=<include_path>
Specifies the location of the LSB header files that will
be linked against.  If this option or the LSBCC_INCLUDES environment
variable is not set, the default 
.I /opt/lsb/include
will be used.  This option overrides the LSBCC_INCLUDES environment setting.
.TP 
--lsb-cxx-includepath=<include_path>
Specifies the location of the LSB header files that will
be linked against.  If this option or the LSBCXX_INCLUDES environment
variable is not set, the default 
.I /opt/lsb/include
will be used.  This option overrides the LSBCXX_INCLUDES environment setting.
.TP 
--lsb-shared-libs=<shared_lib:...>
This option adds libraries to the list of non-lsb libraries to link as
shared libraries (such as product internal shared libraries). 
A library name or colon-separated list of library names to
add to the default list. The name should be the base part
of the library only, for example to add
.I libfoo.so
use the name
.IR foo .
Libraries specified by this option are appended to the list specified
by the LSBCC_SHAREDLIBS environment variable, if any.
.TP
--lsb-shared-libpath=<path:...>
This option adds paths to be searched for shared libraries. Libraries found in
the given set of paths will be added to the list of non-lsb libraries to link
as shared libraries.
Paths specified by this option are appended to the list specified
by the LSBCC_SHAREDLIBPATH environment variable, if any.
.TP 
--lsb-modules=<module,..>
Enable support for the optional/trial-use LSB modules listed.  
Modules specified by this option are appended to the list specified
by the LSB_MODULES environment variable, if any. For a list of modules
supported in any LSB version, use 'lsbcc --lsb-target-version=ver --help'.
.TP
--lsb-use-default-linker
Do not set dynamic linker to the LSB one.
.TP
--lsb-besteffort
This will unset the dynamic linker (like --lsb-use-default-linker),
but will also link in code that tries to use the LSB dynamic linker if
needed.
.TP 
--lsb-target-version=<LSB_version>
Set the version of LSB to build for.
For the list of valid values, call 
.I lsbcc
with the
.I --lsb-version 
option.  If set to a valid value, 
this option overrides the LSBCC_LSBVERSION environment variable. 
If neither are set, the default
.I '@DEFAULT_LSB_VERSION@'
will be used.
.TP 
--lsbcc-version
Print the version of this program, and quit.
.TP 
--lsb-libtool_fixups
Enable semantics that assist in compiling applications with
.I lsbcc
in conjunction with
.IR libtool .
Libtool in some situations will pass filesystem paths to shared libraries
to the compiler rather than as -l arguments.
.I lsbcc
needs to evaluate all shared libraries to determine if they should be linked
shared or statically, 
.I lsbcc 
does this by analyzing -l arguments.  This option 
causes 
.I lsbcc 
to evaluate all files on the command line to determine if they are
shared libraries and to re-write shared libraries found in terms of -L and -l
either as shared or static depending upon if the library is in the list of
LSB allowed shared libraries.
.I lsbcc
will also attempt to include dependant libraries from DT_NEEDED tags if the
library must be linked statically.

.P
.SH ENVIRONMENT
The following environment variables affect the behavior of
.I lsbcc 
and
.IR lsbc++ .
Not all apply to
.IR lsbcpp .
.TP
LSBCC
Specifies the name of the C compiler to invoke with the modified
argument set. If this environment variable is not found,
the default 
.I cc
will be used. (Not for
.IR lsbcpp ).
.TP
LSBCXX
Specifies the name of the C++ compiler to invoke with the modified
argument set. If this environment variable is not found,
the default 
.I c++
will be used. (Not for
.IR lsbcpp ).
.TP
LSBCPP
Specifies the name of the C preprocessor to invoke with the modified
argument set.  If this environment variable is not found, the default
.I cpp
will be used
.RI ( lsbcpp 
only).
.P
.TP
LSBCC_LIBS
Specifies the location of the LSB stub libraries that will
be linked against.  If this environment variable is not found,
the default 
.I /opt/lsb/lib
will be used (or /opt/lsb/lib64 on certain 64-bit architectures).
.P
.TP
LSBCC_INCLUDES
Specifies the location of the LSB header files that will
be linked against.  If this environment variable is not found,
the default 
.I /opt/lsb/include
will be used.
.P
.TP
LSBCXX_INCLUDES
Specifies the location of the LSB C++ header files that will
be linked against.  If this environment variable is not found,
the default 
.I /opt/lsb/include/c++
will be used.
.P
.TP
LSBCC_SHAREDLIBS
A library name or colon-separated list of library names to
add to the default list. The name should be the base part
of the library only, for example to add
.I libfoo.so
use the name
.IR foo .
.TP
LSB_SHAREDLIBPATH
This option adds paths to be searched for shared libraries. Libraries found in
the given set of paths will be added to the list of non-lsb libraries to link
as shared libraries. Note this was erroneously called LSB_SHARELIBPATH
in earlier versions.
.TP
LSB_MODULES
Specify which optional/trial-use LSB modules to include interfaces for.
For a list of modules supported in any LSB version, 
use 'lsbcc --lsb-target-version=ver --help'.
.TP
LSBCC_FORCEFEATURES
This causes 
.I lsbcc 
to insert macro defines for all of the 
interface features it supports (e.g. -DHAVE_BSD, -DHAVE_GNU...).
This can be helpful in some situations and was formerly
the default behavior for 
.IR lsbcc , 
but also can collide with feature macro definitions from other sources,
so is no longer the default behavior for 
.IR lsbcc .
.TP 
LSBCC_LIBTOOLFIXUPS
Enable semantics that assist in compiling applications with
.I lsbcc
in conjunction with
.IR libtool .
Libtool in some situations will pass filesystem paths to shared libraries
to the compiler rather than as -l arguments.
.I lsbcc
needs to evaluate all shared libraries to determine if they should be linked
shared or statically, 
.I lsbcc 
does this by analyzing -l arguments.  This option 
causes 
.I lsbcc 
to evaluate all files on the command line to determine if they are
shared libraries and to re-write shared libraries found in terms of -L and -l
either as shared or static depending upon if the library is in the list of
LSB allowed shared libraries.
.I lsbcc
will also attempt to include dependant libraries from DT_NEEDED tags if the
library must be linked statically.
.TP
LSBCC_USE_DEFAULT_LINKER
Do not set dynamic linker to the LSB one.
.TP
LSBCC_BESTEFFORT
This will unset the dynamic linker (like LSBCC_USE_DEFAULT_LINKER),
but will also link in code that tries to use the LSB dynamic linker if
needed.
.TP
LSBCC_DEBUG
A numeric value which represents a bit pattern specifying what
kinds of debugging output to produce. The bits in this pattern are
.nf

0x0001   Display environmental overrides
0x0002   Display the arguments passed in
0x0004   Display the arguments that are specifically recognized
0x0008   Display the arguments that are not recognized
0x0010   Display changes made to the include arguments
0x0020   Display changes made to the library arguments
0x0040   Display the modified argument list
0x0080   Display strings as they are added to argument chains
.fi
.TP
LSBCC_WARN
A numeric value which represents a bit pattern specifying what
kinds of warnings to emit. The bits in this pattern are
.nf

0x0001   Warn about libraries being changed to static linking
.fi
The 01 value is now on by default, to disable it specify
an LSBCC_WARN where the low bit is set to zero.
.TP
LSBCC_VERBOSE
The complete command line passed to either the C or C++ compiler
will be printed to stderr just prior to execution.  This helps
see the effects of 
.I lsbcc 
and options.
.P
.TP
LSBCC_LSBVERSION
Target LSB version. If this environment variable
is not found, the default
.I '@DEFAULT_LSB_VERSION@'
value (i.e. compile targeting LSB @DEFAULT_LSB_VERSION@) will be used.
Note this value will be overridden by the
--lsb-target-version command-line option if supplied.
.P
.SH Non LSB Shared Libraries
Normally, only LSB-defined libraries should be linked
as shared libraries, all others must be linked statically.
However, if an application provides its own shared libraries
which have been carefully checked for LSB conformance, the following
methods can be used to selectively override
.IR lsbcc 's
rule of forcing static linking. The application may not depend
on such a library being present on a system, so it must either
be shipped with the application, or with another LSB conforming
application on which this application depends.  
.P
Libs added with any of these options will be cumulative. Shared 
libs added with command line options must appear on the command 
line before any -l options to have effect.
.TP 
--lsb-shared-libs=<shared_lib:...>
This option adds libraries to the list of non-lsb libraries to link as
shared libraries (such as product internal shared libraries). 
A library name or colon-separated list of library names to
add to the default list. The name should be the base part
of the library only, for example to add
.I libfoo.so
use the name
.IR foo .
.TP
--lsb-shared-libpath=<path:...>
This option adds paths to be searched for shared libraries. Libraries found in
the given set of paths will be added to the list of non-lsb libraries to link
as shared libraries.
.TP
LSBCC_SHAREDLIBS
A library name or colon-separated list of library names to
add to the default list. The name should be the base part
of the library only, for example to add
.I libfoo.so
use the name
.IR foo .
.IP
.TP
LSB_SHAREDLIBPATH
This option adds paths to be searched for shared libraries. Libraries found in
the given set of paths will be added to the list of non-lsb libraries to link
as shared libraries.

.SH EXAMPLES
.B "lsbcc hello.c -o hello"
.P
.B "CC=lsbcc CXX=lsbc++ ./configure; make"
.P
.B "LSBCC_SHAREDLIBS=tcl:tk CC=lsbcc make"
.P
.SH "AUTHORS"
Stuart Anderson <anderson@freestandards.org>
and other LSB contributors.
.SH "REPORTING BUGS"
Report bugs at http://bugs.linuxbase.org.
.SH "BUGS"
.P
It is possible to confuse the automatic library processing of
.I lsbcc (and 
.IR lsbc++ ).
In particular, build systems that include "clever" tools
to manage which libraries to use, such as GNU 
.I libtool
and 
.IR pkgconfig , 
may defeat the checks for non-LSB libraries
by silently supplying full pathnames instead of the 
.BI -l lib
form.
.SH FILES
.TP
/opt/lsb/include
the LSB header files
.TP
/opt/lsb/lib
the LSB stub libraries. To be more precise, these will appear
as a set of directories 
.IR /opt/lsb/lib-3.0 ,
.IR /opt/lsb/lib-3.1 ,
and so on, for each supported version and
.I /opt/lsb/lib
will represent the default version.  In the case of a 64-bit architecture,
the paths will be of the type
.IR /opt/lsb/lib64 .
.TP
/lib/ld-lsb.so.3
The LSB program interpreter (dynamic linker) for the IA32 architecture
.TP
/lib/ld-lsb-ia64.so.3
The LSB program interpreter for the Itanium architecture
.TP
/lib/ld-lsb-ppc32.so.3
The LSB program interpreter for the PowerPC 32-bit architecture
.TP
/lib64/ld-lsb-ppc64.so.3
The LSB program interpreter for the PowerPC 64-bit architecture
.TP
/lib/ld-lsb-s390.so.3
The LSB program interpreter for the S390 architecture
.TP
/lib64/ld-lsb-s390x.so.3
The LSB program interpreter for the S390X architecture
.TP
/lib64/ld-lsb-x86-64.so.3
The LSB program interpreter for the x86_64 architecture
.SH SEE ALSO
lsbappchk
.P
.SH NOTES
.P
.I lsbcc
is commonly delivered as a package named
.IR lsb-build-cc .
If this package is used, the support package
.I lsb-build-base
must also be installed; 
.I lsb-build-desktop
is optional but would normally be used.
.P
.I lsb-build-c++
supplies necessary header files for C++ compilation;
it is a separate package as the c++ headers come
from a different source than the base headers,
and may be under a separate license as well.
.\" .P
.\" lsbcc will add 
.\" .I -Wl,--as-needed
'\" to all compiler commands that will invoke the linker.  This option causes
'\" the linker to only include explicit dependencies on shared libraries
'\" that are mentioned on the command line if they contain symbols needed
'\" by the objects being linked together.  Traditionally on some systems
'\" it was necessary to also link in shared libraries that where needed
'\" by shared libraries that the objects being linked required but where
'\" not also referenced by the objects being linked.  This is no longer
'\" necessary and this option reduces the number of direct run-time shared
'\" library dependencies.  If either
.\" .I -Wl,--as-needed 
.\" or 
.\" .I -Wl,--no-as-needed 
.\" are passed in the compiler options to lsbcc, lsbcc will not insert 
.\" -IR -Wl,--as-needed .
.\" See the
.\" .BI ld
.\" man page for more information.
.P
For commercial applications, developers need to be aware of the
licenses of the libraries they link to. Since some licenses
allow dynamic but not static linking to the library, and
.I lsbcc
may silently change (apparent) dynamic links to static, the
.B LSBCC_WARN
environment variable should be used to notify of such changes.
.SH COPYRIGHT
Copyright \(co 2002-2012 Linux Foundation
.SH "SEE ALSO"
Linux Standard Base specification and other documents at
http://www.linuxbase.org/

